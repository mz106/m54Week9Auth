Compare pass

// https://www.npmjs.com/package/bcrypt

    //compare passwords
    // what we will need;

    // plain text password (e.g. 'mypassword123) & the hashed password on the DB

    // how do we get plain text password? send it in the request body

    // how do we get the hashed password? find the user

    // How do we find the user? by the username - sent in the request body

    // we've found the user - then, use bcrypt to compare.

    // const matched = use bcrypt.compare(plaintext, hashed password)

    //or

    // req.matched = use bcrypt.compare(plaintext, hashed password) (harder way)

    // if matched false - response with code from unauthorised

    // next()


Login with compare pass


// What do I want to achieve?
    // User able to login.
    // What do I need to happen for the user to be able to login?
    // User enters username and password.
    // Send username and password
    // Compare password with hashed on DB (see comparePass in auth.js)
    // Send back user data to user
    // What kind of data am I sending back?
    // user id, username, NOT PASSWORD, NOT EMAIL
    // Where does the data come from/how do we get it?
    // From DB in Users table
    // Do we already have the user data? If so, where?
    // Yes. We get it in comparePass to compare user passwords
    // Could we reuse this user data and send this back?
    // yes.
    // How do we send it back?
    // In a response in the login function
    // Do we have access to the user data in the login function?
    // No. The user data exists in comparePass.
    // Can we get it from comparePass to login? If so, how?
    // Yes. We can send the user object from comparePass to login.
    // That's cool Z. How?
    // Compare pass gets the request object and passes it to login
    // We can attach the user to the request (req) in comparePass,
    // which will then be available in login.